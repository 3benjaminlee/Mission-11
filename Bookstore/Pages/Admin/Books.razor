@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookstoreRepository>

<table class="table table-sm table-striped table-bordered">

    <thead>
        <tr>
            <th>Book ID</th>
            <th>Book Title</th>
            <th>Author</th>
        </tr>
    </thead>

    <tbody>
        @if (BookData?.Count() > 0)
        {
            @foreach (Book b in BookData)
            {
                <tr>
                    <td>@b.BookID</td>
                    <td>@b.Title</td>
                    <td>@b.Author</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookID)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookID)">Edit</NavLink>
                    </td>

                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</button>
                    </td>
                </tr>
            }

        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Books</td>
            </tr>
        }
    </tbody>
</table>

@*
    This is my new bootstrap code that shows a popup to notify the user that they can create new books. I added a thing class called "hidden" so that it doesnt
    show up on mobile devices (button may be annoying or too big on mobile)
*@


<div class="toast show">
    <div class="toast-header">
        <strong class="me-auto">FYI</strong>
        <button type="button" class="btn-close hidden" data-bs-dismiss="toast"></button>
    </div>
    <div class="toast-body">
        <p>Click the button below to add more books to the Bookstore</p>
    </div>
</div>

<NavLink class="btn btn-primary" href="/admin/books/create">Create</NavLink>



@code {

    public IBookstoreRepository repo => Service;
    public IEnumerable<Book> BookData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }


    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

    public async Task RemoveBook(Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }

}


